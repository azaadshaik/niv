<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Routing;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\UserInterface;
use Drupal\Core\Messenger;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Render\Markup;
use Drupal\Core\Logger;
use Drupal\Core\Session\AccountInterface;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\Core\Site\Settings;


/**
 * @file
 * Primary module hooks for niv module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
 function niv_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  // you code here
 // dump($form);
  //echo "iam here";
  //die;
}

function niv_form_user_form_alter(&$form, &$form_state, $form_id) {
  // you code here
  //dump($form);
  //echo "iam here";
  //die;
}

function niv_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  
  switch ($form_id) {
	  

    case 'user_register_form':
	$roles = \Drupal::currentUser()->getRoles();
	
	
	 if (in_array('niv_admin', $roles)){
		$form['#theme'] = 'org_admin_reg';
		$form['actions']['submit']['#submit'][1] = '_saveuser_nologin';
		//unset($form['actions']['submit']['#submit'][1]);
		//dump($form);
	//die;
	 }
	 else if(in_array('anonymous', $roles)){
		 $form['#theme'] = 'parent_teacher_reg';
	 }
	
      $new_validation = '_niv_form_user_register_form_validate';
     // array_splice($form['#validate'], 3, 0, $new_validation);
    break; 
   
  }
 
}

//overriding user module save() as it is logging the user after registration
function _saveuser_nologin(array $form, FormStateInterface $form_state){
	
	//dump($form_state->getValues());
	//die;
	 $account = Drupal\user\Entity\User::create();
	 
	 $account->setUsername($form_state->getValue('mail'));
    $pass = $account->getPassword();
    $admin = $form_state->getValue('administer_users');
    $notify = !$form_state->isValueEmpty('notify');
	$account->set("field_name", $form_state->getValue('field_name'));
	$account->set("field_organization",$form_state->getValue('field_organization') );
	$account->set('field_email',$form_state->getValue('mail'));
	$account->setEmail($form_state->getValue('mail'));
	$account->addRole('organization_admin');
$account->enforceIsNew();
$account->activate();


    // Save has no return value so this cannot be tested.
    // Assume save has gone through correctly.
    $account->save();

    $form_state->set('user', $account);
    $form_state->setValue('uid', $account->id());

   // $this->logger('user')->notice('New user: %name %email.', ['%name' => $form_state->getValue('name'), '%email' => '<' . $form_state->getValue('mail') . '>', 'type' => $account->toLink($this->t('Edit'), 'edit-form')->toString()]);

    // Add plain text password into user account to generate mail tokens.
    $account->password = $pass;

    // New administrative account without notification.
    if ($admin && !$notify) {
      //$this->messenger()->addStatus($this->t('Created a new user account for <a href=":url">%name</a>. No email has been sent.', [':url' => $account->toUrl()->toString(), '%name' => $username]));
    }
    // No email verification required; log in user immediately.
    elseif (!$admin && !\Drupal::config('user.settings')->get('verify_mail') && $account->isActive()) {
      _user_mail_notify('register_no_approval_required', $account);
      //user_login_finalize($account);
      //$this->messenger()->addStatus($this->t('Registration successful. You are now logged in.'));
      //$form_state->setRedirect('<front>');
    }
    // No administrator approval required.
    elseif ($account->isActive() || $notify) {
      if (!$account->getEmail() && $notify) {
        $this->messenger()->addStatus($this->t('The new user <a href=":url">%name</a> was created without an email address, so no welcome message was sent.', [':url' => $account->toUrl()->toString(), '%name' => $username]));
      }
      else {
        $op = $notify ? 'register_admin_created' : 'register_no_approval_required';
        if (_user_mail_notify($op, $account)) {
          if ($notify) {
            $this->messenger()->addStatus($this->t('A welcome message with further instructions has been emailed to the new user <a href=":url">%name</a>.', [':url' => $account->toUrl()->toString(), '%name' => $username]));
          }
          else {
            $this->messenger()->addStatus($this->t('A welcome message with further instructions has been sent to your email address.'));
            $form_state->setRedirect('<front>');
          }
        }
      }
    }
    // Administrator approval required.
    else {
      _user_mail_notify('register_pending_approval', $account);
      $this->messenger()->addStatus($this->t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your email address.'));
      $form_state->setRedirect('<front>');
    }
}

function _niv_form_user_register_form_validate(array &$form, FormStateInterface $form_state) {
  $errors = $form_state->getErrors();
  
  $values = $form_state->getValues();
  

  
  $org_keys_array = [];
  $roles = \Drupal::currentUser()->getRoles();
  
  
  
  if (!in_array('administrator', $roles) && !in_array('niv_admin', $roles)){
  
  if(!empty($values['field_organization_key'])){
	  
	  $query = \Drupal::entityQuery('node')
    ->condition('type', 'organizations')
    ->condition('field_active', 1, '=');
    $nids = $query->execute();
    $nodes = Node::loadMultiple($nids);
	
	if(!empty($nodes)){
	foreach($nodes as $node){
      $org_secret_key = $node->get('field_organization_code')->getString();
	  $org_keys_array[] = $org_secret_key;
	  
	}
	
	  
      if(!in_array($values['field_organization_key'][0]['value'],$org_keys_array) ) {
        
		
        $message ='Invalid organization Key';
        $form_state->setErrorByName('field_organization_key', t($message));
		
		
          
      }
      
    
	
	}
	else{
		 $message ='Invalid organization Key';
        $form_state->setErrorByName('field_organization_code', t($message));
		$form['field_organization_key']['#attributes']['class'][] = 'error';
	}
	
  
	
  }
  }
  
}
 
/**
 * Implements hook_theme().
 */

function niv_theme($existing, $type, $theme, $path) {
	
	
	
$theme_path = drupal_get_path('theme' , 'niv');

  return [

    'org_admin_reg' => [
	'path' => $theme_path . '/templates/form',
      'template' => 'org_admin_reg',
      'render element' => 'form',
    ],
	'parent_teacher_reg' => [
	'path' => $theme_path . '/templates/form',
      'template' => 'parent_teacher_reg',
      'render element' => 'form',
    ],
	 'profile_view' => [
	'path' => $theme_path . '/templates',
      'template' => 'profile',
      'render element' => 'elements',
      'variables' => ['profiledata' => []]
    ],
	'nivadmin_dashboard' => [
	'path' => $theme_path . '/templates',
      'template' => 'nivadmin_dashboard',
      'render element' => 'elements',
      'variables' => ['counts' => []]
    ],
	
	'nivadmin_addsuggestions' => [
	'path' => $theme_path . '/templates',
      'template' => 'nivadmin_addsuggestions',
      'render element' => 'elements',
      'variables' => ['data' => []]
    ],
	'nivadmin_profile_view' => [
	'path' => $theme_path . '/templates',
      'template' => 'nivadmin_profile_view',
      'render element' => 'elements',
      'variables' => ['profiledata' => []]
    ],
	
	
	
	
	

    

  ];
}


function niv_node_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
	
	//dump($entity);
	$node_author = $entity->uid->entity;
	//dump($node_author->getRoles());
	$type = $entity->getType();
	//$roles = \Drupal::currentUser()->getRoles();
	$roles = $node_author->getRoles(); // current user may be niv admin so better get the roles by author ID
	
	
	if($type=='profile' && (in_array('parent',$roles) || in_array('teacher',$roles))){
	 $name = $entity->title->value;
	 $dob = $entity->field_date_of_birth->value;
	 $dobYear = date('Y',strtotime($dob));
	 $currentYear = date('Y');
	 $age = $currentYear - $dobYear;
	 $gender = $entity->field_gender->value;
	 $nid = $entity->nid->value;
	 
	 $build['#theme'] = 'profile_view';
	 $build['#profiledata'] = ['name'=>$name,'age' => $age,'gender'=>$gender,'nid'=>$nid];
	 $currentUserRoles = \Drupal::currentUser()->getRoles();
	 
	 $query = \Drupal::entityQuery('node')
    ->condition('type', 'niv_form_access')
  	->condition('field_role_of_the_user', $roles, 'IN');
	 $nids = $query->execute();
     $nodes = Node::loadMultiple($nids);
		
	
$recommendedForms =[];
$indexValues = [];
$suggestionsData=[];
$suggestions = [];
$suggestions_form = '';
foreach($nodes as $node){
	if($age >= $node->field_min_age->value && $age <= $node->field_max_age->value){
		$values = ['entity_id'=>$nid,'webform_id'=>$node->field_webform->target_id];
		$submissions = \Drupal::entityTypeManager()->getStorage('webform_submission')->loadByProperties($values);
		if(!empty($submissions)){
			foreach($submissions as $submission){
				if($submission->get('completed')->value){
					$submission_id = $submission->get('sid')->value;
					$build['#profiledata']['sid'] = $submission_id;
					$token = $submission->get('token')->value;
					$form = ['name'=>$node->title->value,'form_link'=>'/webform/'.$node->field_webform->target_id.'/submissions/'.$submission_id.'?token='.$token.'&profile='.$nid,'status'=>1];
					$indexValues = _niv_get_index_values($nid,$submission_id);
					
					
					$suggestions = _niv_get_profile_suggestions($nid,$submission_id);
					if(!empty($suggestions)){
						$suggestionsData = Node::loadMultiple($suggestions);
						$extra = ['submission_id'=>$submission_id,'profile_id'=>$nid];
						$suggestions_form = \Drupal::formBuilder()->getForm('Drupal\niv\Form\profileSuggestionsForm',$extra);
					}
						
					
				}
				else{
					$form = ['name'=>$node->title->value,'form_link'=>'/assessment/'.$nid.'/'.$node->field_webform->target_id.'?profile='.$nid,'status'=>0];
				}
			}
		}
		else{
			
			$form = ['name'=>$node->title->value,'form_link'=>'/assessment/'.$nid.'/'.$node->field_webform->target_id.'?profile='.$nid,'status'=>0];
		}
	}
	$recommendedForms[] = $form;
}
if( in_array('niv_admin',$currentUserRoles)){
	$build['#theme'] = 'nivadmin_profile_view';
	$tempSuggestions =[];
	if(!empty($suggestionsData)){
		foreach($suggestionsData as $suggestion){
			
			$tempSuggestions[] = $suggestion->get('title')->value;
		
		}
		$suggestionsData = $tempSuggestions; 
	}
	
}
$build['#profiledata']['forms'] = $recommendedForms;
$build['#profiledata']['indexValues'] = $indexValues;
$build['#profiledata']['suggestions'] = $suggestions_form;
$build['#profiledata']['suggestionsData'] = $suggestionsData;

}
  
}


function niv_webform_submission_presave(WebformSubmissionInterface $webform_submission) {
  //$current_data = $webform_submission->getData(); 
  //dump($webform_submission->entity_id->value);
   $entity_id = \Drupal::request()->query->get('profile');
  $webform_submission->set('entity_id',$entity_id);
  $webform_submission->set('entity_type','node');
   
}


function _niv_get_profile_suggestions($profileId,$submissionId){
	$connection = \Drupal::database();
					$query = $connection->select('niv_suggestion_mapping', 'n');
					$query->condition('n.profile_id',$profileId );
					$query->condition('n.submission_id', $submissionId);
					$query->fields('n', ['id', 'suggestion_id']);
					$results = $query->execute()->fetchAllKeyed(0,1);
					
					return $results;
}


function _niv_get_index_values($profileId,$submissionId){
	$values = ['entity_id'=>$profileId,'sid'=>$submissionId];
    $submission = \Drupal::entityTypeManager()
->getStorage('webform_submission')
->loadByProperties($values);

$vision_raw_score = 0;
$hearing_raw_score =0;
$touch_raw_score=0;
$taste_and_smell_raw_score=0;
$body_awareness_raw_score=0;
$balance_and_motion_raw_score=0;
$planning_and_ideas_raw_score=0;
$social_participation_raw_score=0;

//dump($submission);
//dump( $submission[$submissionId]->getData());
$data = $submission[$submissionId]->getData();

foreach($data as $key=>$value){

  
  if((int) $key>=1 && (int) $key<=10){
      $vision_raw_score = $vision_raw_score+ (int) $value;
  }
  elseif((int) $key>=11 && (int) $key<=20){
    $hearing_raw_score = $hearing_raw_score+ (int) $value;
}
if((int) $key>=21 && (int) $key<=30){
  $touch_raw_score = $touch_raw_score+ (int) $value;
}
if((int) $key>=31 && (int) $key<=40){
  $taste_and_smell_raw_score = $taste_and_smell_raw_score+ (int) $value;
}
if((int) $key>=41 && (int) $key<=50){
  $body_awareness_raw_score = $body_awareness_raw_score+ (int) $value;
}
if((int) $key>=51 && (int) $key<=60){
  $balance_and_motion_raw_score = $balance_and_motion_raw_score+ (int) $value;
}
if((int) $key>=61 && (int) $key<=70){
  $planning_and_ideas_raw_score = $planning_and_ideas_raw_score+ (int) $value;
}
if((int) $key>=71 && (int) $key<=80){
  $social_participation_raw_score = $social_participation_raw_score+ (int) $value;
}
  


}
$total_raw_score = $vision_raw_score + $hearing_raw_score + $touch_raw_score + $taste_and_smell_raw_score + $body_awareness_raw_score + $balance_and_motion_raw_score;

// echo 'Vision Raw Score:'.$vision_raw_score."<br>";
// echo 'Hearing Raw Score:'.$hearing_raw_score."<br>";
// echo 'Touch Raw Score:'.$touch_raw_score."<br>";
// echo 'Taste And Smell Raw Score:'.$taste_and_smell_raw_score."<br>";
// echo 'Body Awareness Raw Score:'.$body_awareness_raw_score."<br>";
// echo 'Balance and Motion Raw Score:'.$balance_and_motion_raw_score."<br>";
// echo 'Planning nad Ideas Raw Score:'.$planning_and_ideas_raw_score."<br>";
// echo 'Social Participation Raw Score:'.$social_participation_raw_score."<br>";

// echo 'Total raw Scores ( except Social Participation and Planning and Ideas):'. $total_raw_score."<br>";

//dump(Settings::get('t-score-matrix'));

$tscore_matrix = Settings::get('t_score_home_matrix');
$nivscore_matrix = Settings::get('t_score_niv_score_matrix');
$niv_constants = Settings::get('niv_constants');
$ei_constants = $niv_constants['engagement_index'];
$att_constants = $niv_constants['attention_index'];


$vision_tscore = $tscore_matrix['vision_raw_score'][$vision_raw_score];
$hearing_tscore = $tscore_matrix['hearing_raw_score'][$hearing_raw_score];
$touch_tscore = $tscore_matrix['touch_raw_score'][$touch_raw_score];
$taste_tscore = $tscore_matrix['taste_raw_score'][$taste_and_smell_raw_score];
$body_tscore = $tscore_matrix['body_raw_score'][$body_awareness_raw_score];
$balance_tscore = $tscore_matrix['balance_raw_score'][$balance_and_motion_raw_score];
$planning_tscore = $tscore_matrix['planning_raw_score'][$planning_and_ideas_raw_score];
$social_tscore = $tscore_matrix['social_raw_score'][$social_participation_raw_score];

// echo 'social tscore: '.$social_tscore."<br>";

$vision_niv_score = $nivscore_matrix[$vision_tscore];
$hearing_niv_score = $nivscore_matrix[$hearing_tscore];
$touch_niv_score = $nivscore_matrix[$touch_tscore];
$taste_niv_score = $nivscore_matrix[$taste_tscore];
$body_niv_score = $nivscore_matrix[$body_tscore];
$balance_niv_score = $nivscore_matrix[$balance_tscore];
$planning_niv_sscore = $nivscore_matrix[$planning_tscore];
$social_niv_score = $nivscore_matrix[$social_tscore];

//echo 'social niv score: '.$social_niv_score."<br>";

$ei_social = ($ei_constants['social'] * $social_niv_score) / 100;
$ei_visual = ($ei_constants['vision'] * $vision_niv_score) / 100;
$ei_hearing = ($ei_constants['hearing'] * $hearing_niv_score) / 100;
$ei_body = ($ei_constants['body'] * $body_niv_score) / 100;
$ei_touch = ($ei_constants['touch'] * $touch_niv_score) / 100;
$ei_balance = ($ei_constants['balance'] * $balance_niv_score) / 100;
$ei_planning = ($ei_constants['planning'] * $planning_niv_sscore) / 100;


$engagementIndex = $ei_social + $ei_visual + $ei_hearing + $ei_touch + $ei_body + $ei_balance + $ei_planning;


$att_social = ($att_constants['social'] * $social_niv_score) / 100;
$att_visual = ($att_constants['vision'] * $vision_niv_score) / 100;
$att_hearing = ($att_constants['hearing'] * $hearing_niv_score) / 100;
$att_body = ($att_constants['body'] * $body_niv_score) / 100;
$att_touch = ($att_constants['touch'] * $touch_niv_score) / 100;
$att_balance = ($att_constants['balance'] * $balance_niv_score) / 100;
$att_planning = ($att_constants['planning'] * $planning_niv_sscore) / 100;

$attentionIndex = $att_social + $att_visual + $att_hearing + $att_touch + $att_body + $att_balance + $att_planning;

$performanceIndex = ($engagementIndex + $attentionIndex) /2 ;

return ['performanceIndex'=> $performanceIndex,'attentionIndex'=> $attentionIndex,'engagementIndex'=> $engagementIndex];

// echo 'Engagement Index :' .$engagementIndex."<br>";
// echo 'Attention Index :' .$attentionIndex."<br>";
// echo 'Performance Index :' .$performanceIndex."<br>";
// echo "I am in";
// die;
}
//https://codepen.io/haiiaaa/pen/rNVbmYy

  
